
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace GameProto.Runtime.Config.network
{
public sealed partial class Server : GameFramework.DataTable.IDataRow
{
    /// <summary>
    /// Id
    /// </summary>
public int Id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
public network.ServerType Type { get; private set; }
    /// <summary>
    /// 主机
    /// </summary>
public string Host { get; private set; }
    /// <summary>
    /// 端口
    /// </summary>
public int Port { get; private set; }
    /// <summary>
    /// 网络包头长度
    /// </summary>
public int PackageHeaderLength { get; private set; }

public const int __ID__ = 1275148067;

int GameFramework.DataTable.IDataRow.Id => Id;

    public  bool ParseDataRow(string dataRowString, object userData)
    {
    
        var __node = userData as JSONNode;
        { if(!__node["id"].IsNumber) { throw new SerializationException(); }  Id = __node["id"]; }
        { if(!__node["type"].IsNumber) { throw new SerializationException(); }  Type = (network.ServerType)__node["type"].AsInt; }
        { if(!__node["host"].IsString) { throw new SerializationException(); }  Host = __node["host"]; }
        { if(!__node["port"].IsNumber) { throw new SerializationException(); }  Port = __node["port"]; }
        { if(!__node["package_header_length"].IsNumber) { throw new SerializationException(); }  PackageHeaderLength = __node["package_header_length"]; }
        return true;
    }

    public bool ParseDataRow(byte[] dataRowBytes, int startIndex, int length, object userData)
    {
        return ParseDataRow(System.Text.Encoding.UTF8.GetString(dataRowBytes, startIndex, length), userData);
    }


    public static Server DeserializeServer(JSONNode _buf)
    {
        return DeserializeImpl<network.Server>();

        T DeserializeImpl<T>() where T : GameFramework.DataTable.IDataRow, new()
        {
            var inst = new T();
            if (!inst.ParseDataRow(null, _buf)) throw new SerializationException();
            return inst;
        }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "type:" + Type + ","
        + "host:" + Host + ","
        + "port:" + Port + ","
        + "packageHeaderLength:" + PackageHeaderLength + ","
        + "}";
    }
}
}

