
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace GameProto.Runtime.Config.world
{
public sealed partial class Tile : GameFramework.DataTable.IDataRow
{
    /// <summary>
    /// id
    /// </summary>
public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
public string Name { get; private set; }
    /// <summary>
    /// 标志
    /// </summary>
public world.TileFlag Flags { get; private set; }

public const int __ID__ = 411783082;

int GameFramework.DataTable.IDataRow.Id => Id;

    public  bool ParseDataRow(string dataRowString, object userData)
    {
    
        var __node = userData as JSONNode;
        { if(!__node["id"].IsNumber) { throw new SerializationException(); }  Id = __node["id"]; }
        { if(!__node["name"].IsString) { throw new SerializationException(); }  Name = __node["name"]; }
        { if(!__node["flags"].IsNumber) { throw new SerializationException(); }  Flags = (world.TileFlag)__node["flags"].AsInt; }
        return true;
    }

    public bool ParseDataRow(byte[] dataRowBytes, int startIndex, int length, object userData)
    {
        return ParseDataRow(System.Text.Encoding.UTF8.GetString(dataRowBytes, startIndex, length), userData);
    }


    public static Tile DeserializeTile(JSONNode _buf)
    {
        return DeserializeImpl<world.Tile>();

        T DeserializeImpl<T>() where T : GameFramework.DataTable.IDataRow, new()
        {
            var inst = new T();
            if (!inst.ParseDataRow(null, _buf)) throw new SerializationException();
            return inst;
        }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "flags:" + Flags + ","
        + "}";
    }
}
}

