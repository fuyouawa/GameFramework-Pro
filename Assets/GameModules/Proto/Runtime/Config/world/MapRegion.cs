
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace GameProto.Runtime.Config.world
{
public sealed partial class MapRegion : GameFramework.DataTable.IDataRow
{
    /// <summary>
    /// id
    /// </summary>
public int Id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
public string Name { get; private set; }
    /// <summary>
    /// 范围
    /// </summary>
public common.RectInt Range { get; private set; }
    /// <summary>
    /// 是否为分部定义，一个区域可能由多个Rect组成，这个时候就需要将该字段设为TRUE，然后定义另一个和该区域名称相同的定义。
    /// </summary>
public bool Partial { get; private set; }

public const int __ID__ = -481688588;

int GameFramework.DataTable.IDataRow.Id => Id;

    public  bool ParseDataRow(string dataRowString, object userData)
    {
    
        var __node = userData as JSONNode;
        { if(!__node["id"].IsNumber) { throw new SerializationException(); }  Id = __node["id"]; }
        { if(!__node["name"].IsString) { throw new SerializationException(); }  Name = __node["name"]; }
        { if(!__node["range"].IsObject) { throw new SerializationException(); }  Range = global::GameProto.Runtime.Config.common.RectInt.DeserializeRectInt(__node["range"]);  }
        { if(!__node["partial"].IsBoolean) { throw new SerializationException(); }  Partial = __node["partial"]; }
        return true;
    }

    public bool ParseDataRow(byte[] dataRowBytes, int startIndex, int length, object userData)
    {
        return ParseDataRow(System.Text.Encoding.UTF8.GetString(dataRowBytes, startIndex, length), userData);
    }


    public static MapRegion DeserializeMapRegion(JSONNode _buf)
    {
        return DeserializeImpl<world.MapRegion>();

        T DeserializeImpl<T>() where T : GameFramework.DataTable.IDataRow, new()
        {
            var inst = new T();
            if (!inst.ParseDataRow(null, _buf)) throw new SerializationException();
            return inst;
        }
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "range:" + Range + ","
        + "partial:" + Partial + ","
        + "}";
    }
}
}

